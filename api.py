import os
import hashlib
import requests
import time
import itertools
from glob import glob
from shutil import move

class HashCalculator:
    def __init__(self, buffer_size=65536):
        self.buffer_size = buffer_size

    def hitung_sha256(self, file_path):
        try:
            hasher = hashlib.sha256()
            with open(file_path, 'rb') as file:
                buf = file.read(self.buffer_size)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = file.read(self.buffer_size)
            return hasher.hexdigest()
        except FileNotFoundError:
            print("File not found")

class FileMonitor:
    def __init__(self, api_key, buffer_size=65536):
        self.api_key = api_key
        self.buffer_size = buffer_size
        self.opened_files = set()
        self.processed_files = set()
        self.hash_calculator = HashCalculator()
        self.hybrid_checker = HybridAnalysisChecker(api_key, buffer_size)

    def monitor_folder(self, folder, hasil):
        try:
            while True:
                files = set(itertools.chain.from_iterable(glob(os.path.join(folder, ext)) for ext in ['*.exe', '*.bat', '*.dll']))
                for file_path in files:
                    sha256_hash = self.hash_calculator.hitung_sha256(file_path)
                    self.check_hybrid_analysis(sha256_hash, os.path.basename(file_path), hasil, file_path)
                time.sleep(20)
        except KeyboardInterrupt:
            print("\nMonitoring dihentikan oleh pengguna, program berhenti.")

    def check_hybrid_analysis(self, sha256_hash, file_name, hasil, file_path):
        self.hybrid_checker.check_hybrid_analysis(sha256_hash, file_name, hasil, file_path)

class HybridAnalysisChecker:
    def __init__(self, api_key, buffer_size=65536):
        self.api_key = api_key
        self.buffer_size = buffer_size

    @staticmethod
    def buka_text_file(file_path):
        try:
            os.system(f'start notepad.exe "{file_path}"')
        except Exception as e:
            print(f"Failed to open file {file_path} in Notepad. Error: {str(e)}")
            
    def check_hybrid_analysis(self, sha256_hash, file_name, hasil, file_path):
        hasil_file = os.path.join(hasil, f"hasil_scan_{file_name}.txt")
        try:
            url = f'https://www.hybrid-analysis.com/api/v2/overview/{sha256_hash}'
            headers = {
                'accept': 'application/json',
                'api-key': self.api_key,
            }
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                json_data = response.json()
                with open(hasil_file, "w", encoding='utf-8') as file:
                    file.write(f"File: {file_name}\n")
                    file.write(f"SHA256 Hash: {sha256_hash}\n")
                    file.write("Hasil Scan:\n")
                    file.write(f"- Threat Score: {json_data.get('threat_score')}\n")
                    file.write(f"- Verdict: {json_data.get('verdict')}\n")
                    file.write(f"- Type: {json_data.get('type')}\n")
                    file.write(f"- Analysis Start Time: {json_data.get('analysis_start_time')}\n")

                    file.write("Scanners:\n")
                    malicious_scanners = [scanner['name'] for scanner in json_data.get('scanners', []) if scanner['status'] == 'malicious']
                    for scanner in json_data.get('scanners', []):
                        status = 'malicious' if scanner['name'] in malicious_scanners else scanner['status']
                        file.write(f"  - {scanner['name']}: {status}\n")

                    file.flush()
                    os.fsync(file.fileno())

                verdict = json_data.get('verdict')
                if 'malicious' in malicious_scanners or verdict == 'malicious':
                    print(f"WARNING: File {file_name} dengan hash {sha256_hash} terdeteksi malicious!")
                    self.deteksi_file_bahaya(file_path, 'malicious', hasil_file)
                elif verdict == 'suspicious':
                    print(f"ATTENTION: File {file_name} dengan hash {sha256_hash} terdeteksi suspicious!")
                    self.deteksi_file_bahaya(file_path, 'suspicious', hasil_file)
                else:
                    print(f"File {file_name} aman banget ini mahh....")
            elif response.status_code == 404:
                print(f"File {file_name} tidak ditemukan di Hybrid Analysis")
            else:
                print(f'Error: {response.status_code}')
                print(response.text)
        except Exception as e:
            print(f"Error writing to file {hasil_file}: {str(e)}")

    def deteksi_file_bahaya(self, file_path, threat_type, hasil_file):
        if threat_type == 'malicious':
            print(f"File {file_path} terdeteksi sebagai malicious.")
        elif threat_type == 'suspicious':
            print(f"File {file_path} terdeteksi sebagai suspicious.")
            
        self.buka_text_file(hasil_file)

        user_input = input(f"Apakah Anda ingin menghapus file atau memindahkannya ke folder karantina? (hapus/karantina): ").lower()
        if user_input == 'hapus':
            os.remove(file_path)
            print(f"File {file_path} telah dihapus.")
        elif user_input == 'karantina':
            karantina_folder = "Lokasi folder untuk karantina"
            destination_path = os.path.join(karantina_folder, os.path.basename(file_path))

            if os.path.exists(destination_path):
                print(f"File {file_path} sudah ada di folder karantina.\n")
            else:
                try:
                    move(file_path, destination_path)
                    print(f"File {file_path} telah dipindahkan ke folder karantina.\n")
                except Exception as e:
                    print(f"Failed to move file {file_path} to karantina folder. Error: {str(e)}\n")
        else:
            print("Pilihan tidak valid. File tidak dihapus atau dipindahkan ke folder karantina.\n")

if __name__ == "__main__":
    folder = "Lokasi folder untuk yang akan di scan"
    hasil = "Lokasi folder hasil scan"
    api_key = '(API KEY Hybrid analisis)'
    file_monitor = FileMonitor(api_key=api_key)
    file_monitor.monitor_folder(folder, hasil)
